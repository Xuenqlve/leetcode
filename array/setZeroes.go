package array

//给定一个 m x n 的矩阵，如果一个元素为 0 ，则将其所在行和列的所有元素都设为 0 。请使用 原地 算法。
//示例 1：
//输入：matrix = [[1,1,1],[1,0,1],[1,1,1]]
//输出：[[1,0,1],[0,0,0],[1,0,1]]
//示例 2：
//输入：matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]
//输出：[[0,0,0,0],[0,4,5,0],[0,3,1,0]]
//提示：
//m == matrix.length
//n == matrix[0].length
//1 <= m, n <= 200
//-231 <= matrix[i][j] <= 231 - 1
//进阶：
//一个直观的解决方案是使用  O(mn) 的额外空间，但这并不是一个好的解决方案。
//一个简单的改进方案是使用 O(m + n) 的额外空间，但这仍然不是最好的解决方案。
//你能想出一个仅使用常量空间的解决方案吗？

// [1,1,1]      [1,0,1]
// [1,0,1]   >  [0,0,1]
// [1,1,1]      [1,1,1]

// [1,0,1]      [1,0,1]
// [0,0,1]   >  [0,0,0]
// [1,1,1]      [1,0,1]

//[0,1,2,0]      [0,1,2,0]     col0 = true
//[3,4,5,2]   >  [3,4,5,2]
//[1,3,1,5]      [1,3,1,5]

//[0,1,2,0]      [0,0,0,0]
//[3,4,5,2]   >  [3,4,5,0]
//[1,3,1,5]      [1,3,1,0]

// col0 = true
//[0,0,0,0]      [0,0,0,0]
//[3,4,5,0]   >  [0,4,5,0]
//[1,3,1,0]      [0,3,1,0]

func setZeroes(matrix [][]int) {
	n, m := len(matrix), len(matrix[0])
	col0 := false // col0 标记 第一列是否为0
	for _, r := range matrix {
		if r[0] == 0 {
			col0 = true
		}
		for j := 1; j < m; j++ {
			if r[j] == 0 {
				r[0] = 0         // 这一行的第一列置为0 标记这一行为0
				matrix[0][j] = 0 // 这一列的第一行置为0 标记这一列为0
			}
		}
	}
	for i := n - 1; i >= 0; i-- {
		for j := 1; j < m; j++ {
			if matrix[i][0] == 0 || matrix[0][j] == 0 { // 判断这个数 所处行的第一个 和所处列的第一个 是否为0
				matrix[i][j] = 0
			}
		}
		if col0 {
			matrix[i][0] = 0
		}
	}
}
